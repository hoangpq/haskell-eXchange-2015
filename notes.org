* intro
- Haxl is a library for parallelising and batching data-fetching
- Haxl is a library for parallelising and batching data reads and
  writes
- Haxl is a library for parallelising and batching I/O
- Haxl is a library for parallelising, batching, and caching I/O
- Haxl is a library for parallelising, batching, caching, and memoizing I/O
- Haxl is made of unicorns and rainbows

* overview

What I'm going to tell you about in this talk.

- Why is Haxl useful?
  - batching data-fetching
- How does it work?
- ApplicativeDo
  - Demo, expand the blog example
- Caching
  - Simple web crawler
- Doing write operations
  - uncachedDataFetch
  - turn off ApplicativeDo?
- Memoization
  - example?
- Generalize the scheduler
- Eventually..
  - Shake

* demo 1

Suppose we have a simple blog using SQL as the storage

- show data in sqlite

Next, let's make a little Haskell API for this

- Show BlogDB.hs
- ghci BlogDB.hs
- runBlog getPostIds
- runBlog $ getPostIds >>= mapM getPostContent

* problem: batching queries

Now, the problem is that we made a separate select call each time we
wanted to get the content of a post.

We could make an API for that:

  multiGetPostContent :: [Id] -> Blog [PostContent]

but that's a horrible special-case.

 - distasteful because it duplicates what mapM does

 - Furthermore, what would happen if we wanted to do something like
   fetch the most recent 5 posts to render, and somewhere else on the
   page fetch the content of the top 5 most-viewed posts.  We would
   have to destroy modularity to use multiGetPostContent.

Haxl solves this.

* Haxl and data sources

 - Haxl is a Monad
 - (actually it's GenHaxl ...)
 - The main entry point is dataFetch
   - describe dataFetch
   - req is a type constructor parameterized by the result
     - give an example of a request, for Blog
   - Request is a collection of constraints over request types
   - the other half of the story is DataSource
     - DataSource is the implementation of fetching for these requests
     - Show the DataSource type class
     - *** key idea ***
       - fetch gets given multiple requests at once, so it can do
         intelligent batching and concurrency

  - Haxl also performs multiple fetches at the same time (maybe later?)

* demo 2: batching queries with Haxl

 - Show BlogDataSource
 - Show DataSource class
 - demo runBlog $ getPostIds >>= mapM getPostContent

* data sources

 - Haxl supports

* problem 2: people want to use the do syntax

* demo 3: ApplicativeDo
